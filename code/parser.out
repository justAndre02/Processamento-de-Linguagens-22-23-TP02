Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> axioma
Rule 1     axioma -> Inicio code Fim
Rule 2     code -> S
Rule 3     code -> code ; S
Rule 4     S -> C
Rule 5     S -> E
Rule 6     S -> A
Rule 7     S -> condicao
Rule 8     condicao -> se E entao c_list senao c_list fim_se
Rule 9     C -> escrever ( e_list ) ;
Rule 10    C -> entrada ( var ) ;
Rule 11    C -> para var de E ate E fazer c_list fim_para
Rule 12    A -> fun var ( args ) { code }
Rule 13    A -> var atribui E ;
Rule 14    A -> var aleatorio ( E ) ;
Rule 15    e_list -> E
Rule 16    e_list -> e_list , E
Rule 17    c_list -> C
Rule 18    c_list -> c_list ; C
Rule 19    N -> nr
Rule 20    N -> E + E ;
Rule 21    N -> E - E ;
Rule 22    N -> E * E ;
Rule 23    N -> E / E ;
Rule 24    N -> E < E ;
Rule 25    N -> E > E ;
Rule 26    N -> cos ( E ) ;
Rule 27    N -> sen ( E ) ;
Rule 28    B -> F
Rule 29    B -> E e E ;
Rule 30    B -> E ou E ;
Rule 31    F -> verdadeiro
Rule 32    F -> falso
Rule 33    F -> nao F
Rule 34    F -> nao var
Rule 35    E -> var
Rule 36    E -> ( E )
Rule 37    E -> B
Rule 38    E -> N
Rule 39    E -> string
Rule 40    E -> chamada_funcao arg_list
Rule 41    E -> chamada_funcao
Rule 42    args -> <empty>
Rule 43    args -> var_list
Rule 44    var_list -> var
Rule 45    var_list -> var_list , var
Rule 46    arg_list -> E
Rule 47    arg_list -> arg_list , E
Rule 48    comment_single -> # comment_body
Rule 49    comment_multi -> # * comment_body * #
Rule 50    comment_body -> STRING
Rule 51    comment_body -> comment_body STRING
Rule 52    C -> comment_single
Rule 53    C -> comment_multi

Terminals, with rules where they appear

#                    : 48 49 49
(                    : 9 10 12 14 26 27 36
)                    : 9 10 12 14 26 27 36
*                    : 22 49 49
+                    : 20
,                    : 16 45 47
-                    : 21
/                    : 23
;                    : 3 9 10 13 14 18 20 21 22 23 24 25 26 27 29 30
<                    : 24
>                    : 25
Fim                  : 1
Inicio               : 1
STRING               : 50 51
aleatorio            : 14
ate                  : 11
atribui              : 13
chamada_funcao       : 40 41
cos                  : 26
de                   : 11
e                    : 29
entao                : 8
entrada              : 10
error                : 
escrever             : 9
falso                : 32
fazer                : 11
fim_para             : 11
fim_se               : 8
fun                  : 12
nao                  : 33 34
nr                   : 19
ou                   : 30
para                 : 11
se                   : 8
sen                  : 27
senao                : 8
string               : 39
var                  : 10 11 12 13 14 34 35 44 45
verdadeiro           : 31
{                    : 12
}                    : 12

Nonterminals, with rules where they appear

A                    : 6
B                    : 37
C                    : 4 17 18
E                    : 5 8 11 11 13 14 15 16 20 20 21 21 22 22 23 23 24 24 25 25 26 27 29 29 30 30 36 46 47
F                    : 28 33
N                    : 38
S                    : 2 3
arg_list             : 40 47
args                 : 12
axioma               : 0
c_list               : 8 8 11 18
code                 : 1 3 12
comment_body         : 48 49 51
comment_multi        : 53
comment_single       : 52
condicao             : 7
e_list               : 9 16
var_list             : 43 45

Parsing method: LALR

state 0

    (0) S' -> . axioma
    (1) axioma -> . Inicio code Fim

    Inicio          shift and go to state 2

    axioma                         shift and go to state 1

state 1

    (0) S' -> axioma .



state 2

    (1) axioma -> Inicio . code Fim
    (2) code -> . S
    (3) code -> . code ; S
    (4) S -> . C
    (5) S -> . E
    (6) S -> . A
    (7) S -> . condicao
    (9) C -> . escrever ( e_list ) ;
    (10) C -> . entrada ( var ) ;
    (11) C -> . para var de E ate E fazer c_list fim_para
    (52) C -> . comment_single
    (53) C -> . comment_multi
    (35) E -> . var
    (36) E -> . ( E )
    (37) E -> . B
    (38) E -> . N
    (39) E -> . string
    (40) E -> . chamada_funcao arg_list
    (41) E -> . chamada_funcao
    (12) A -> . fun var ( args ) { code }
    (13) A -> . var atribui E ;
    (14) A -> . var aleatorio ( E ) ;
    (8) condicao -> . se E entao c_list senao c_list fim_se
    (48) comment_single -> . # comment_body
    (49) comment_multi -> . # * comment_body * #
    (28) B -> . F
    (29) B -> . E e E ;
    (30) B -> . E ou E ;
    (19) N -> . nr
    (20) N -> . E + E ;
    (21) N -> . E - E ;
    (22) N -> . E * E ;
    (23) N -> . E / E ;
    (24) N -> . E < E ;
    (25) N -> . E > E ;
    (26) N -> . cos ( E ) ;
    (27) N -> . sen ( E ) ;
    (31) F -> . verdadeiro
    (32) F -> . falso
    (33) F -> . nao F
    (34) F -> . nao var

    escrever        shift and go to state 9
    entrada         shift and go to state 11
    para            shift and go to state 13
    var             shift and go to state 12
    (               shift and go to state 10
    string          shift and go to state 18
    chamada_funcao  shift and go to state 19
    fun             shift and go to state 20
    se              shift and go to state 21
    #               shift and go to state 22
    nr              shift and go to state 24
    cos             shift and go to state 25
    sen             shift and go to state 26
    verdadeiro      shift and go to state 27
    falso           shift and go to state 28
    nao             shift and go to state 29

    code                           shift and go to state 3
    S                              shift and go to state 4
    C                              shift and go to state 5
    E                              shift and go to state 6
    A                              shift and go to state 7
    condicao                       shift and go to state 8
    comment_single                 shift and go to state 14
    comment_multi                  shift and go to state 15
    B                              shift and go to state 16
    N                              shift and go to state 17
    F                              shift and go to state 23

state 3

    (1) axioma -> Inicio code . Fim
    (3) code -> code . ; S

    Fim             shift and go to state 30
    ;               shift and go to state 31


state 4

    (2) code -> S .

    Fim             reduce using rule 2 (code -> S .)
    ;               reduce using rule 2 (code -> S .)
    }               reduce using rule 2 (code -> S .)


state 5

    (4) S -> C .

    Fim             reduce using rule 4 (S -> C .)
    ;               reduce using rule 4 (S -> C .)
    }               reduce using rule 4 (S -> C .)


state 6

    (5) S -> E .
    (29) B -> E . e E ;
    (30) B -> E . ou E ;
    (20) N -> E . + E ;
    (21) N -> E . - E ;
    (22) N -> E . * E ;
    (23) N -> E . / E ;
    (24) N -> E . < E ;
    (25) N -> E . > E ;

    Fim             reduce using rule 5 (S -> E .)
    ;               reduce using rule 5 (S -> E .)
    }               reduce using rule 5 (S -> E .)
    e               shift and go to state 32
    ou              shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    <               shift and go to state 38
    >               shift and go to state 39


state 7

    (6) S -> A .

    Fim             reduce using rule 6 (S -> A .)
    ;               reduce using rule 6 (S -> A .)
    }               reduce using rule 6 (S -> A .)


state 8

    (7) S -> condicao .

    Fim             reduce using rule 7 (S -> condicao .)
    ;               reduce using rule 7 (S -> condicao .)
    }               reduce using rule 7 (S -> condicao .)


state 9

    (9) C -> escrever . ( e_list ) ;

    (               shift and go to state 40


state 10

    (36) E -> ( . E )
    (35) E -> . var
    (36) E -> . ( E )
    (37) E -> . B
    (38) E -> . N
    (39) E -> . string
    (40) E -> . chamada_funcao arg_list
    (41) E -> . chamada_funcao
    (28) B -> . F
    (29) B -> . E e E ;
    (30) B -> . E ou E ;
    (19) N -> . nr
    (20) N -> . E + E ;
    (21) N -> . E - E ;
    (22) N -> . E * E ;
    (23) N -> . E / E ;
    (24) N -> . E < E ;
    (25) N -> . E > E ;
    (26) N -> . cos ( E ) ;
    (27) N -> . sen ( E ) ;
    (31) F -> . verdadeiro
    (32) F -> . falso
    (33) F -> . nao F
    (34) F -> . nao var

    var             shift and go to state 42
    (               shift and go to state 10
    string          shift and go to state 18
    chamada_funcao  shift and go to state 19
    nr              shift and go to state 24
    cos             shift and go to state 25
    sen             shift and go to state 26
    verdadeiro      shift and go to state 27
    falso           shift and go to state 28
    nao             shift and go to state 29

    E                              shift and go to state 41
    B                              shift and go to state 16
    N                              shift and go to state 17
    F                              shift and go to state 23

state 11

    (10) C -> entrada . ( var ) ;

    (               shift and go to state 43


state 12

    (35) E -> var .
    (13) A -> var . atribui E ;
    (14) A -> var . aleatorio ( E ) ;

    e               reduce using rule 35 (E -> var .)
    ou              reduce using rule 35 (E -> var .)
    +               reduce using rule 35 (E -> var .)
    -               reduce using rule 35 (E -> var .)
    *               reduce using rule 35 (E -> var .)
    /               reduce using rule 35 (E -> var .)
    <               reduce using rule 35 (E -> var .)
    >               reduce using rule 35 (E -> var .)
    Fim             reduce using rule 35 (E -> var .)
    ;               reduce using rule 35 (E -> var .)
    }               reduce using rule 35 (E -> var .)
    atribui         shift and go to state 44
    aleatorio       shift and go to state 45


state 13

    (11) C -> para . var de E ate E fazer c_list fim_para

    var             shift and go to state 46


state 14

    (52) C -> comment_single .

    Fim             reduce using rule 52 (C -> comment_single .)
    ;               reduce using rule 52 (C -> comment_single .)
    }               reduce using rule 52 (C -> comment_single .)
    senao           reduce using rule 52 (C -> comment_single .)
    fim_se          reduce using rule 52 (C -> comment_single .)
    fim_para        reduce using rule 52 (C -> comment_single .)


state 15

    (53) C -> comment_multi .

    Fim             reduce using rule 53 (C -> comment_multi .)
    ;               reduce using rule 53 (C -> comment_multi .)
    }               reduce using rule 53 (C -> comment_multi .)
    senao           reduce using rule 53 (C -> comment_multi .)
    fim_se          reduce using rule 53 (C -> comment_multi .)
    fim_para        reduce using rule 53 (C -> comment_multi .)


state 16

    (37) E -> B .

    e               reduce using rule 37 (E -> B .)
    ou              reduce using rule 37 (E -> B .)
    +               reduce using rule 37 (E -> B .)
    -               reduce using rule 37 (E -> B .)
    *               reduce using rule 37 (E -> B .)
    /               reduce using rule 37 (E -> B .)
    <               reduce using rule 37 (E -> B .)
    >               reduce using rule 37 (E -> B .)
    Fim             reduce using rule 37 (E -> B .)
    ;               reduce using rule 37 (E -> B .)
    )               reduce using rule 37 (E -> B .)
    ,               reduce using rule 37 (E -> B .)
    entao           reduce using rule 37 (E -> B .)
    }               reduce using rule 37 (E -> B .)
    ate             reduce using rule 37 (E -> B .)
    fazer           reduce using rule 37 (E -> B .)


state 17

    (38) E -> N .

    e               reduce using rule 38 (E -> N .)
    ou              reduce using rule 38 (E -> N .)
    +               reduce using rule 38 (E -> N .)
    -               reduce using rule 38 (E -> N .)
    *               reduce using rule 38 (E -> N .)
    /               reduce using rule 38 (E -> N .)
    <               reduce using rule 38 (E -> N .)
    >               reduce using rule 38 (E -> N .)
    Fim             reduce using rule 38 (E -> N .)
    ;               reduce using rule 38 (E -> N .)
    )               reduce using rule 38 (E -> N .)
    ,               reduce using rule 38 (E -> N .)
    entao           reduce using rule 38 (E -> N .)
    }               reduce using rule 38 (E -> N .)
    ate             reduce using rule 38 (E -> N .)
    fazer           reduce using rule 38 (E -> N .)


state 18

    (39) E -> string .

    e               reduce using rule 39 (E -> string .)
    ou              reduce using rule 39 (E -> string .)
    +               reduce using rule 39 (E -> string .)
    -               reduce using rule 39 (E -> string .)
    *               reduce using rule 39 (E -> string .)
    /               reduce using rule 39 (E -> string .)
    <               reduce using rule 39 (E -> string .)
    >               reduce using rule 39 (E -> string .)
    Fim             reduce using rule 39 (E -> string .)
    ;               reduce using rule 39 (E -> string .)
    )               reduce using rule 39 (E -> string .)
    ,               reduce using rule 39 (E -> string .)
    entao           reduce using rule 39 (E -> string .)
    }               reduce using rule 39 (E -> string .)
    ate             reduce using rule 39 (E -> string .)
    fazer           reduce using rule 39 (E -> string .)


state 19

    (40) E -> chamada_funcao . arg_list
    (41) E -> chamada_funcao .
    (46) arg_list -> . E
    (47) arg_list -> . arg_list , E
    (35) E -> . var
    (36) E -> . ( E )
    (37) E -> . B
    (38) E -> . N
    (39) E -> . string
    (40) E -> . chamada_funcao arg_list
    (41) E -> . chamada_funcao
    (28) B -> . F
    (29) B -> . E e E ;
    (30) B -> . E ou E ;
    (19) N -> . nr
    (20) N -> . E + E ;
    (21) N -> . E - E ;
    (22) N -> . E * E ;
    (23) N -> . E / E ;
    (24) N -> . E < E ;
    (25) N -> . E > E ;
    (26) N -> . cos ( E ) ;
    (27) N -> . sen ( E ) ;
    (31) F -> . verdadeiro
    (32) F -> . falso
    (33) F -> . nao F
    (34) F -> . nao var

    e               reduce using rule 41 (E -> chamada_funcao .)
    ou              reduce using rule 41 (E -> chamada_funcao .)
    +               reduce using rule 41 (E -> chamada_funcao .)
    -               reduce using rule 41 (E -> chamada_funcao .)
    *               reduce using rule 41 (E -> chamada_funcao .)
    /               reduce using rule 41 (E -> chamada_funcao .)
    <               reduce using rule 41 (E -> chamada_funcao .)
    >               reduce using rule 41 (E -> chamada_funcao .)
    Fim             reduce using rule 41 (E -> chamada_funcao .)
    ;               reduce using rule 41 (E -> chamada_funcao .)
    )               reduce using rule 41 (E -> chamada_funcao .)
    ,               reduce using rule 41 (E -> chamada_funcao .)
    entao           reduce using rule 41 (E -> chamada_funcao .)
    }               reduce using rule 41 (E -> chamada_funcao .)
    ate             reduce using rule 41 (E -> chamada_funcao .)
    fazer           reduce using rule 41 (E -> chamada_funcao .)
    var             shift and go to state 42
    (               shift and go to state 10
    string          shift and go to state 18
    chamada_funcao  shift and go to state 19
    nr              shift and go to state 24
    cos             shift and go to state 25
    sen             shift and go to state 26
    verdadeiro      shift and go to state 27
    falso           shift and go to state 28
    nao             shift and go to state 29

    arg_list                       shift and go to state 47
    E                              shift and go to state 48
    B                              shift and go to state 16
    N                              shift and go to state 17
    F                              shift and go to state 23

state 20

    (12) A -> fun . var ( args ) { code }

    var             shift and go to state 49


state 21

    (8) condicao -> se . E entao c_list senao c_list fim_se
    (35) E -> . var
    (36) E -> . ( E )
    (37) E -> . B
    (38) E -> . N
    (39) E -> . string
    (40) E -> . chamada_funcao arg_list
    (41) E -> . chamada_funcao
    (28) B -> . F
    (29) B -> . E e E ;
    (30) B -> . E ou E ;
    (19) N -> . nr
    (20) N -> . E + E ;
    (21) N -> . E - E ;
    (22) N -> . E * E ;
    (23) N -> . E / E ;
    (24) N -> . E < E ;
    (25) N -> . E > E ;
    (26) N -> . cos ( E ) ;
    (27) N -> . sen ( E ) ;
    (31) F -> . verdadeiro
    (32) F -> . falso
    (33) F -> . nao F
    (34) F -> . nao var

    var             shift and go to state 42
    (               shift and go to state 10
    string          shift and go to state 18
    chamada_funcao  shift and go to state 19
    nr              shift and go to state 24
    cos             shift and go to state 25
    sen             shift and go to state 26
    verdadeiro      shift and go to state 27
    falso           shift and go to state 28
    nao             shift and go to state 29

    E                              shift and go to state 50
    B                              shift and go to state 16
    N                              shift and go to state 17
    F                              shift and go to state 23

state 22

    (48) comment_single -> # . comment_body
    (49) comment_multi -> # . * comment_body * #
    (50) comment_body -> . STRING
    (51) comment_body -> . comment_body STRING

    *               shift and go to state 52
    STRING          shift and go to state 53

    comment_body                   shift and go to state 51

state 23

    (28) B -> F .

    e               reduce using rule 28 (B -> F .)
    ou              reduce using rule 28 (B -> F .)
    +               reduce using rule 28 (B -> F .)
    -               reduce using rule 28 (B -> F .)
    *               reduce using rule 28 (B -> F .)
    /               reduce using rule 28 (B -> F .)
    <               reduce using rule 28 (B -> F .)
    >               reduce using rule 28 (B -> F .)
    Fim             reduce using rule 28 (B -> F .)
    ;               reduce using rule 28 (B -> F .)
    )               reduce using rule 28 (B -> F .)
    ,               reduce using rule 28 (B -> F .)
    entao           reduce using rule 28 (B -> F .)
    }               reduce using rule 28 (B -> F .)
    ate             reduce using rule 28 (B -> F .)
    fazer           reduce using rule 28 (B -> F .)


state 24

    (19) N -> nr .

    e               reduce using rule 19 (N -> nr .)
    ou              reduce using rule 19 (N -> nr .)
    +               reduce using rule 19 (N -> nr .)
    -               reduce using rule 19 (N -> nr .)
    *               reduce using rule 19 (N -> nr .)
    /               reduce using rule 19 (N -> nr .)
    <               reduce using rule 19 (N -> nr .)
    >               reduce using rule 19 (N -> nr .)
    Fim             reduce using rule 19 (N -> nr .)
    ;               reduce using rule 19 (N -> nr .)
    )               reduce using rule 19 (N -> nr .)
    ,               reduce using rule 19 (N -> nr .)
    entao           reduce using rule 19 (N -> nr .)
    }               reduce using rule 19 (N -> nr .)
    ate             reduce using rule 19 (N -> nr .)
    fazer           reduce using rule 19 (N -> nr .)


state 25

    (26) N -> cos . ( E ) ;

    (               shift and go to state 54


state 26

    (27) N -> sen . ( E ) ;

    (               shift and go to state 55


state 27

    (31) F -> verdadeiro .

    e               reduce using rule 31 (F -> verdadeiro .)
    ou              reduce using rule 31 (F -> verdadeiro .)
    +               reduce using rule 31 (F -> verdadeiro .)
    -               reduce using rule 31 (F -> verdadeiro .)
    *               reduce using rule 31 (F -> verdadeiro .)
    /               reduce using rule 31 (F -> verdadeiro .)
    <               reduce using rule 31 (F -> verdadeiro .)
    >               reduce using rule 31 (F -> verdadeiro .)
    Fim             reduce using rule 31 (F -> verdadeiro .)
    ;               reduce using rule 31 (F -> verdadeiro .)
    )               reduce using rule 31 (F -> verdadeiro .)
    ,               reduce using rule 31 (F -> verdadeiro .)
    entao           reduce using rule 31 (F -> verdadeiro .)
    }               reduce using rule 31 (F -> verdadeiro .)
    ate             reduce using rule 31 (F -> verdadeiro .)
    fazer           reduce using rule 31 (F -> verdadeiro .)


state 28

    (32) F -> falso .

    e               reduce using rule 32 (F -> falso .)
    ou              reduce using rule 32 (F -> falso .)
    +               reduce using rule 32 (F -> falso .)
    -               reduce using rule 32 (F -> falso .)
    *               reduce using rule 32 (F -> falso .)
    /               reduce using rule 32 (F -> falso .)
    <               reduce using rule 32 (F -> falso .)
    >               reduce using rule 32 (F -> falso .)
    Fim             reduce using rule 32 (F -> falso .)
    ;               reduce using rule 32 (F -> falso .)
    )               reduce using rule 32 (F -> falso .)
    ,               reduce using rule 32 (F -> falso .)
    entao           reduce using rule 32 (F -> falso .)
    }               reduce using rule 32 (F -> falso .)
    ate             reduce using rule 32 (F -> falso .)
    fazer           reduce using rule 32 (F -> falso .)


state 29

    (33) F -> nao . F
    (34) F -> nao . var
    (31) F -> . verdadeiro
    (32) F -> . falso
    (33) F -> . nao F
    (34) F -> . nao var

    var             shift and go to state 57
    verdadeiro      shift and go to state 27
    falso           shift and go to state 28
    nao             shift and go to state 29

    F                              shift and go to state 56

state 30

    (1) axioma -> Inicio code Fim .

    $end            reduce using rule 1 (axioma -> Inicio code Fim .)


state 31

    (3) code -> code ; . S
    (4) S -> . C
    (5) S -> . E
    (6) S -> . A
    (7) S -> . condicao
    (9) C -> . escrever ( e_list ) ;
    (10) C -> . entrada ( var ) ;
    (11) C -> . para var de E ate E fazer c_list fim_para
    (52) C -> . comment_single
    (53) C -> . comment_multi
    (35) E -> . var
    (36) E -> . ( E )
    (37) E -> . B
    (38) E -> . N
    (39) E -> . string
    (40) E -> . chamada_funcao arg_list
    (41) E -> . chamada_funcao
    (12) A -> . fun var ( args ) { code }
    (13) A -> . var atribui E ;
    (14) A -> . var aleatorio ( E ) ;
    (8) condicao -> . se E entao c_list senao c_list fim_se
    (48) comment_single -> . # comment_body
    (49) comment_multi -> . # * comment_body * #
    (28) B -> . F
    (29) B -> . E e E ;
    (30) B -> . E ou E ;
    (19) N -> . nr
    (20) N -> . E + E ;
    (21) N -> . E - E ;
    (22) N -> . E * E ;
    (23) N -> . E / E ;
    (24) N -> . E < E ;
    (25) N -> . E > E ;
    (26) N -> . cos ( E ) ;
    (27) N -> . sen ( E ) ;
    (31) F -> . verdadeiro
    (32) F -> . falso
    (33) F -> . nao F
    (34) F -> . nao var

    escrever        shift and go to state 9
    entrada         shift and go to state 11
    para            shift and go to state 13
    var             shift and go to state 12
    (               shift and go to state 10
    string          shift and go to state 18
    chamada_funcao  shift and go to state 19
    fun             shift and go to state 20
    se              shift and go to state 21
    #               shift and go to state 22
    nr              shift and go to state 24
    cos             shift and go to state 25
    sen             shift and go to state 26
    verdadeiro      shift and go to state 27
    falso           shift and go to state 28
    nao             shift and go to state 29

    S                              shift and go to state 58
    C                              shift and go to state 5
    E                              shift and go to state 6
    A                              shift and go to state 7
    condicao                       shift and go to state 8
    comment_single                 shift and go to state 14
    comment_multi                  shift and go to state 15
    B                              shift and go to state 16
    N                              shift and go to state 17
    F                              shift and go to state 23

state 32

    (29) B -> E e . E ;
    (35) E -> . var
    (36) E -> . ( E )
    (37) E -> . B
    (38) E -> . N
    (39) E -> . string
    (40) E -> . chamada_funcao arg_list
    (41) E -> . chamada_funcao
    (28) B -> . F
    (29) B -> . E e E ;
    (30) B -> . E ou E ;
    (19) N -> . nr
    (20) N -> . E + E ;
    (21) N -> . E - E ;
    (22) N -> . E * E ;
    (23) N -> . E / E ;
    (24) N -> . E < E ;
    (25) N -> . E > E ;
    (26) N -> . cos ( E ) ;
    (27) N -> . sen ( E ) ;
    (31) F -> . verdadeiro
    (32) F -> . falso
    (33) F -> . nao F
    (34) F -> . nao var

    var             shift and go to state 42
    (               shift and go to state 10
    string          shift and go to state 18
    chamada_funcao  shift and go to state 19
    nr              shift and go to state 24
    cos             shift and go to state 25
    sen             shift and go to state 26
    verdadeiro      shift and go to state 27
    falso           shift and go to state 28
    nao             shift and go to state 29

    E                              shift and go to state 59
    B                              shift and go to state 16
    N                              shift and go to state 17
    F                              shift and go to state 23

state 33

    (30) B -> E ou . E ;
    (35) E -> . var
    (36) E -> . ( E )
    (37) E -> . B
    (38) E -> . N
    (39) E -> . string
    (40) E -> . chamada_funcao arg_list
    (41) E -> . chamada_funcao
    (28) B -> . F
    (29) B -> . E e E ;
    (30) B -> . E ou E ;
    (19) N -> . nr
    (20) N -> . E + E ;
    (21) N -> . E - E ;
    (22) N -> . E * E ;
    (23) N -> . E / E ;
    (24) N -> . E < E ;
    (25) N -> . E > E ;
    (26) N -> . cos ( E ) ;
    (27) N -> . sen ( E ) ;
    (31) F -> . verdadeiro
    (32) F -> . falso
    (33) F -> . nao F
    (34) F -> . nao var

    var             shift and go to state 42
    (               shift and go to state 10
    string          shift and go to state 18
    chamada_funcao  shift and go to state 19
    nr              shift and go to state 24
    cos             shift and go to state 25
    sen             shift and go to state 26
    verdadeiro      shift and go to state 27
    falso           shift and go to state 28
    nao             shift and go to state 29

    E                              shift and go to state 60
    B                              shift and go to state 16
    N                              shift and go to state 17
    F                              shift and go to state 23

state 34

    (20) N -> E + . E ;
    (35) E -> . var
    (36) E -> . ( E )
    (37) E -> . B
    (38) E -> . N
    (39) E -> . string
    (40) E -> . chamada_funcao arg_list
    (41) E -> . chamada_funcao
    (28) B -> . F
    (29) B -> . E e E ;
    (30) B -> . E ou E ;
    (19) N -> . nr
    (20) N -> . E + E ;
    (21) N -> . E - E ;
    (22) N -> . E * E ;
    (23) N -> . E / E ;
    (24) N -> . E < E ;
    (25) N -> . E > E ;
    (26) N -> . cos ( E ) ;
    (27) N -> . sen ( E ) ;
    (31) F -> . verdadeiro
    (32) F -> . falso
    (33) F -> . nao F
    (34) F -> . nao var

    var             shift and go to state 42
    (               shift and go to state 10
    string          shift and go to state 18
    chamada_funcao  shift and go to state 19
    nr              shift and go to state 24
    cos             shift and go to state 25
    sen             shift and go to state 26
    verdadeiro      shift and go to state 27
    falso           shift and go to state 28
    nao             shift and go to state 29

    E                              shift and go to state 61
    B                              shift and go to state 16
    N                              shift and go to state 17
    F                              shift and go to state 23

state 35

    (21) N -> E - . E ;
    (35) E -> . var
    (36) E -> . ( E )
    (37) E -> . B
    (38) E -> . N
    (39) E -> . string
    (40) E -> . chamada_funcao arg_list
    (41) E -> . chamada_funcao
    (28) B -> . F
    (29) B -> . E e E ;
    (30) B -> . E ou E ;
    (19) N -> . nr
    (20) N -> . E + E ;
    (21) N -> . E - E ;
    (22) N -> . E * E ;
    (23) N -> . E / E ;
    (24) N -> . E < E ;
    (25) N -> . E > E ;
    (26) N -> . cos ( E ) ;
    (27) N -> . sen ( E ) ;
    (31) F -> . verdadeiro
    (32) F -> . falso
    (33) F -> . nao F
    (34) F -> . nao var

    var             shift and go to state 42
    (               shift and go to state 10
    string          shift and go to state 18
    chamada_funcao  shift and go to state 19
    nr              shift and go to state 24
    cos             shift and go to state 25
    sen             shift and go to state 26
    verdadeiro      shift and go to state 27
    falso           shift and go to state 28
    nao             shift and go to state 29

    E                              shift and go to state 62
    B                              shift and go to state 16
    N                              shift and go to state 17
    F                              shift and go to state 23

state 36

    (22) N -> E * . E ;
    (35) E -> . var
    (36) E -> . ( E )
    (37) E -> . B
    (38) E -> . N
    (39) E -> . string
    (40) E -> . chamada_funcao arg_list
    (41) E -> . chamada_funcao
    (28) B -> . F
    (29) B -> . E e E ;
    (30) B -> . E ou E ;
    (19) N -> . nr
    (20) N -> . E + E ;
    (21) N -> . E - E ;
    (22) N -> . E * E ;
    (23) N -> . E / E ;
    (24) N -> . E < E ;
    (25) N -> . E > E ;
    (26) N -> . cos ( E ) ;
    (27) N -> . sen ( E ) ;
    (31) F -> . verdadeiro
    (32) F -> . falso
    (33) F -> . nao F
    (34) F -> . nao var

    var             shift and go to state 42
    (               shift and go to state 10
    string          shift and go to state 18
    chamada_funcao  shift and go to state 19
    nr              shift and go to state 24
    cos             shift and go to state 25
    sen             shift and go to state 26
    verdadeiro      shift and go to state 27
    falso           shift and go to state 28
    nao             shift and go to state 29

    E                              shift and go to state 63
    B                              shift and go to state 16
    N                              shift and go to state 17
    F                              shift and go to state 23

state 37

    (23) N -> E / . E ;
    (35) E -> . var
    (36) E -> . ( E )
    (37) E -> . B
    (38) E -> . N
    (39) E -> . string
    (40) E -> . chamada_funcao arg_list
    (41) E -> . chamada_funcao
    (28) B -> . F
    (29) B -> . E e E ;
    (30) B -> . E ou E ;
    (19) N -> . nr
    (20) N -> . E + E ;
    (21) N -> . E - E ;
    (22) N -> . E * E ;
    (23) N -> . E / E ;
    (24) N -> . E < E ;
    (25) N -> . E > E ;
    (26) N -> . cos ( E ) ;
    (27) N -> . sen ( E ) ;
    (31) F -> . verdadeiro
    (32) F -> . falso
    (33) F -> . nao F
    (34) F -> . nao var

    var             shift and go to state 42
    (               shift and go to state 10
    string          shift and go to state 18
    chamada_funcao  shift and go to state 19
    nr              shift and go to state 24
    cos             shift and go to state 25
    sen             shift and go to state 26
    verdadeiro      shift and go to state 27
    falso           shift and go to state 28
    nao             shift and go to state 29

    E                              shift and go to state 64
    B                              shift and go to state 16
    N                              shift and go to state 17
    F                              shift and go to state 23

state 38

    (24) N -> E < . E ;
    (35) E -> . var
    (36) E -> . ( E )
    (37) E -> . B
    (38) E -> . N
    (39) E -> . string
    (40) E -> . chamada_funcao arg_list
    (41) E -> . chamada_funcao
    (28) B -> . F
    (29) B -> . E e E ;
    (30) B -> . E ou E ;
    (19) N -> . nr
    (20) N -> . E + E ;
    (21) N -> . E - E ;
    (22) N -> . E * E ;
    (23) N -> . E / E ;
    (24) N -> . E < E ;
    (25) N -> . E > E ;
    (26) N -> . cos ( E ) ;
    (27) N -> . sen ( E ) ;
    (31) F -> . verdadeiro
    (32) F -> . falso
    (33) F -> . nao F
    (34) F -> . nao var

    var             shift and go to state 42
    (               shift and go to state 10
    string          shift and go to state 18
    chamada_funcao  shift and go to state 19
    nr              shift and go to state 24
    cos             shift and go to state 25
    sen             shift and go to state 26
    verdadeiro      shift and go to state 27
    falso           shift and go to state 28
    nao             shift and go to state 29

    E                              shift and go to state 65
    B                              shift and go to state 16
    N                              shift and go to state 17
    F                              shift and go to state 23

state 39

    (25) N -> E > . E ;
    (35) E -> . var
    (36) E -> . ( E )
    (37) E -> . B
    (38) E -> . N
    (39) E -> . string
    (40) E -> . chamada_funcao arg_list
    (41) E -> . chamada_funcao
    (28) B -> . F
    (29) B -> . E e E ;
    (30) B -> . E ou E ;
    (19) N -> . nr
    (20) N -> . E + E ;
    (21) N -> . E - E ;
    (22) N -> . E * E ;
    (23) N -> . E / E ;
    (24) N -> . E < E ;
    (25) N -> . E > E ;
    (26) N -> . cos ( E ) ;
    (27) N -> . sen ( E ) ;
    (31) F -> . verdadeiro
    (32) F -> . falso
    (33) F -> . nao F
    (34) F -> . nao var

    var             shift and go to state 42
    (               shift and go to state 10
    string          shift and go to state 18
    chamada_funcao  shift and go to state 19
    nr              shift and go to state 24
    cos             shift and go to state 25
    sen             shift and go to state 26
    verdadeiro      shift and go to state 27
    falso           shift and go to state 28
    nao             shift and go to state 29

    E                              shift and go to state 66
    B                              shift and go to state 16
    N                              shift and go to state 17
    F                              shift and go to state 23

state 40

    (9) C -> escrever ( . e_list ) ;
    (15) e_list -> . E
    (16) e_list -> . e_list , E
    (35) E -> . var
    (36) E -> . ( E )
    (37) E -> . B
    (38) E -> . N
    (39) E -> . string
    (40) E -> . chamada_funcao arg_list
    (41) E -> . chamada_funcao
    (28) B -> . F
    (29) B -> . E e E ;
    (30) B -> . E ou E ;
    (19) N -> . nr
    (20) N -> . E + E ;
    (21) N -> . E - E ;
    (22) N -> . E * E ;
    (23) N -> . E / E ;
    (24) N -> . E < E ;
    (25) N -> . E > E ;
    (26) N -> . cos ( E ) ;
    (27) N -> . sen ( E ) ;
    (31) F -> . verdadeiro
    (32) F -> . falso
    (33) F -> . nao F
    (34) F -> . nao var

    var             shift and go to state 42
    (               shift and go to state 10
    string          shift and go to state 18
    chamada_funcao  shift and go to state 19
    nr              shift and go to state 24
    cos             shift and go to state 25
    sen             shift and go to state 26
    verdadeiro      shift and go to state 27
    falso           shift and go to state 28
    nao             shift and go to state 29

    e_list                         shift and go to state 67
    E                              shift and go to state 68
    B                              shift and go to state 16
    N                              shift and go to state 17
    F                              shift and go to state 23

state 41

    (36) E -> ( E . )
    (29) B -> E . e E ;
    (30) B -> E . ou E ;
    (20) N -> E . + E ;
    (21) N -> E . - E ;
    (22) N -> E . * E ;
    (23) N -> E . / E ;
    (24) N -> E . < E ;
    (25) N -> E . > E ;

    )               shift and go to state 69
    e               shift and go to state 32
    ou              shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    <               shift and go to state 38
    >               shift and go to state 39


state 42

    (35) E -> var .

    )               reduce using rule 35 (E -> var .)
    e               reduce using rule 35 (E -> var .)
    ou              reduce using rule 35 (E -> var .)
    +               reduce using rule 35 (E -> var .)
    -               reduce using rule 35 (E -> var .)
    *               reduce using rule 35 (E -> var .)
    /               reduce using rule 35 (E -> var .)
    <               reduce using rule 35 (E -> var .)
    >               reduce using rule 35 (E -> var .)
    ,               reduce using rule 35 (E -> var .)
    Fim             reduce using rule 35 (E -> var .)
    ;               reduce using rule 35 (E -> var .)
    entao           reduce using rule 35 (E -> var .)
    }               reduce using rule 35 (E -> var .)
    ate             reduce using rule 35 (E -> var .)
    fazer           reduce using rule 35 (E -> var .)


state 43

    (10) C -> entrada ( . var ) ;

    var             shift and go to state 70


state 44

    (13) A -> var atribui . E ;
    (35) E -> . var
    (36) E -> . ( E )
    (37) E -> . B
    (38) E -> . N
    (39) E -> . string
    (40) E -> . chamada_funcao arg_list
    (41) E -> . chamada_funcao
    (28) B -> . F
    (29) B -> . E e E ;
    (30) B -> . E ou E ;
    (19) N -> . nr
    (20) N -> . E + E ;
    (21) N -> . E - E ;
    (22) N -> . E * E ;
    (23) N -> . E / E ;
    (24) N -> . E < E ;
    (25) N -> . E > E ;
    (26) N -> . cos ( E ) ;
    (27) N -> . sen ( E ) ;
    (31) F -> . verdadeiro
    (32) F -> . falso
    (33) F -> . nao F
    (34) F -> . nao var

    var             shift and go to state 42
    (               shift and go to state 10
    string          shift and go to state 18
    chamada_funcao  shift and go to state 19
    nr              shift and go to state 24
    cos             shift and go to state 25
    sen             shift and go to state 26
    verdadeiro      shift and go to state 27
    falso           shift and go to state 28
    nao             shift and go to state 29

    E                              shift and go to state 71
    B                              shift and go to state 16
    N                              shift and go to state 17
    F                              shift and go to state 23

state 45

    (14) A -> var aleatorio . ( E ) ;

    (               shift and go to state 72


state 46

    (11) C -> para var . de E ate E fazer c_list fim_para

    de              shift and go to state 73


state 47

    (40) E -> chamada_funcao arg_list .
    (47) arg_list -> arg_list . , E

  ! shift/reduce conflict for , resolved as shift
    e               reduce using rule 40 (E -> chamada_funcao arg_list .)
    ou              reduce using rule 40 (E -> chamada_funcao arg_list .)
    +               reduce using rule 40 (E -> chamada_funcao arg_list .)
    -               reduce using rule 40 (E -> chamada_funcao arg_list .)
    *               reduce using rule 40 (E -> chamada_funcao arg_list .)
    /               reduce using rule 40 (E -> chamada_funcao arg_list .)
    <               reduce using rule 40 (E -> chamada_funcao arg_list .)
    >               reduce using rule 40 (E -> chamada_funcao arg_list .)
    Fim             reduce using rule 40 (E -> chamada_funcao arg_list .)
    ;               reduce using rule 40 (E -> chamada_funcao arg_list .)
    )               reduce using rule 40 (E -> chamada_funcao arg_list .)
    entao           reduce using rule 40 (E -> chamada_funcao arg_list .)
    }               reduce using rule 40 (E -> chamada_funcao arg_list .)
    ate             reduce using rule 40 (E -> chamada_funcao arg_list .)
    fazer           reduce using rule 40 (E -> chamada_funcao arg_list .)
    ,               shift and go to state 74

  ! ,               [ reduce using rule 40 (E -> chamada_funcao arg_list .) ]


state 48

    (46) arg_list -> E .
    (29) B -> E . e E ;
    (30) B -> E . ou E ;
    (20) N -> E . + E ;
    (21) N -> E . - E ;
    (22) N -> E . * E ;
    (23) N -> E . / E ;
    (24) N -> E . < E ;
    (25) N -> E . > E ;

  ! shift/reduce conflict for e resolved as shift
  ! shift/reduce conflict for ou resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
    ,               reduce using rule 46 (arg_list -> E .)
    Fim             reduce using rule 46 (arg_list -> E .)
    ;               reduce using rule 46 (arg_list -> E .)
    )               reduce using rule 46 (arg_list -> E .)
    entao           reduce using rule 46 (arg_list -> E .)
    }               reduce using rule 46 (arg_list -> E .)
    ate             reduce using rule 46 (arg_list -> E .)
    fazer           reduce using rule 46 (arg_list -> E .)
    e               shift and go to state 32
    ou              shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    <               shift and go to state 38
    >               shift and go to state 39

  ! e               [ reduce using rule 46 (arg_list -> E .) ]
  ! ou              [ reduce using rule 46 (arg_list -> E .) ]
  ! +               [ reduce using rule 46 (arg_list -> E .) ]
  ! -               [ reduce using rule 46 (arg_list -> E .) ]
  ! *               [ reduce using rule 46 (arg_list -> E .) ]
  ! /               [ reduce using rule 46 (arg_list -> E .) ]
  ! <               [ reduce using rule 46 (arg_list -> E .) ]
  ! >               [ reduce using rule 46 (arg_list -> E .) ]


state 49

    (12) A -> fun var . ( args ) { code }

    (               shift and go to state 75


state 50

    (8) condicao -> se E . entao c_list senao c_list fim_se
    (29) B -> E . e E ;
    (30) B -> E . ou E ;
    (20) N -> E . + E ;
    (21) N -> E . - E ;
    (22) N -> E . * E ;
    (23) N -> E . / E ;
    (24) N -> E . < E ;
    (25) N -> E . > E ;

    entao           shift and go to state 76
    e               shift and go to state 32
    ou              shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    <               shift and go to state 38
    >               shift and go to state 39


state 51

    (48) comment_single -> # comment_body .
    (51) comment_body -> comment_body . STRING

    Fim             reduce using rule 48 (comment_single -> # comment_body .)
    ;               reduce using rule 48 (comment_single -> # comment_body .)
    }               reduce using rule 48 (comment_single -> # comment_body .)
    senao           reduce using rule 48 (comment_single -> # comment_body .)
    fim_se          reduce using rule 48 (comment_single -> # comment_body .)
    fim_para        reduce using rule 48 (comment_single -> # comment_body .)
    STRING          shift and go to state 77


state 52

    (49) comment_multi -> # * . comment_body * #
    (50) comment_body -> . STRING
    (51) comment_body -> . comment_body STRING

    STRING          shift and go to state 53

    comment_body                   shift and go to state 78

state 53

    (50) comment_body -> STRING .

    STRING          reduce using rule 50 (comment_body -> STRING .)
    Fim             reduce using rule 50 (comment_body -> STRING .)
    ;               reduce using rule 50 (comment_body -> STRING .)
    }               reduce using rule 50 (comment_body -> STRING .)
    senao           reduce using rule 50 (comment_body -> STRING .)
    fim_se          reduce using rule 50 (comment_body -> STRING .)
    fim_para        reduce using rule 50 (comment_body -> STRING .)
    *               reduce using rule 50 (comment_body -> STRING .)


state 54

    (26) N -> cos ( . E ) ;
    (35) E -> . var
    (36) E -> . ( E )
    (37) E -> . B
    (38) E -> . N
    (39) E -> . string
    (40) E -> . chamada_funcao arg_list
    (41) E -> . chamada_funcao
    (28) B -> . F
    (29) B -> . E e E ;
    (30) B -> . E ou E ;
    (19) N -> . nr
    (20) N -> . E + E ;
    (21) N -> . E - E ;
    (22) N -> . E * E ;
    (23) N -> . E / E ;
    (24) N -> . E < E ;
    (25) N -> . E > E ;
    (26) N -> . cos ( E ) ;
    (27) N -> . sen ( E ) ;
    (31) F -> . verdadeiro
    (32) F -> . falso
    (33) F -> . nao F
    (34) F -> . nao var

    var             shift and go to state 42
    (               shift and go to state 10
    string          shift and go to state 18
    chamada_funcao  shift and go to state 19
    nr              shift and go to state 24
    cos             shift and go to state 25
    sen             shift and go to state 26
    verdadeiro      shift and go to state 27
    falso           shift and go to state 28
    nao             shift and go to state 29

    E                              shift and go to state 79
    B                              shift and go to state 16
    N                              shift and go to state 17
    F                              shift and go to state 23

state 55

    (27) N -> sen ( . E ) ;
    (35) E -> . var
    (36) E -> . ( E )
    (37) E -> . B
    (38) E -> . N
    (39) E -> . string
    (40) E -> . chamada_funcao arg_list
    (41) E -> . chamada_funcao
    (28) B -> . F
    (29) B -> . E e E ;
    (30) B -> . E ou E ;
    (19) N -> . nr
    (20) N -> . E + E ;
    (21) N -> . E - E ;
    (22) N -> . E * E ;
    (23) N -> . E / E ;
    (24) N -> . E < E ;
    (25) N -> . E > E ;
    (26) N -> . cos ( E ) ;
    (27) N -> . sen ( E ) ;
    (31) F -> . verdadeiro
    (32) F -> . falso
    (33) F -> . nao F
    (34) F -> . nao var

    var             shift and go to state 42
    (               shift and go to state 10
    string          shift and go to state 18
    chamada_funcao  shift and go to state 19
    nr              shift and go to state 24
    cos             shift and go to state 25
    sen             shift and go to state 26
    verdadeiro      shift and go to state 27
    falso           shift and go to state 28
    nao             shift and go to state 29

    E                              shift and go to state 80
    B                              shift and go to state 16
    N                              shift and go to state 17
    F                              shift and go to state 23

state 56

    (33) F -> nao F .

    e               reduce using rule 33 (F -> nao F .)
    ou              reduce using rule 33 (F -> nao F .)
    +               reduce using rule 33 (F -> nao F .)
    -               reduce using rule 33 (F -> nao F .)
    *               reduce using rule 33 (F -> nao F .)
    /               reduce using rule 33 (F -> nao F .)
    <               reduce using rule 33 (F -> nao F .)
    >               reduce using rule 33 (F -> nao F .)
    Fim             reduce using rule 33 (F -> nao F .)
    ;               reduce using rule 33 (F -> nao F .)
    )               reduce using rule 33 (F -> nao F .)
    ,               reduce using rule 33 (F -> nao F .)
    entao           reduce using rule 33 (F -> nao F .)
    }               reduce using rule 33 (F -> nao F .)
    ate             reduce using rule 33 (F -> nao F .)
    fazer           reduce using rule 33 (F -> nao F .)


state 57

    (34) F -> nao var .

    e               reduce using rule 34 (F -> nao var .)
    ou              reduce using rule 34 (F -> nao var .)
    +               reduce using rule 34 (F -> nao var .)
    -               reduce using rule 34 (F -> nao var .)
    *               reduce using rule 34 (F -> nao var .)
    /               reduce using rule 34 (F -> nao var .)
    <               reduce using rule 34 (F -> nao var .)
    >               reduce using rule 34 (F -> nao var .)
    Fim             reduce using rule 34 (F -> nao var .)
    ;               reduce using rule 34 (F -> nao var .)
    )               reduce using rule 34 (F -> nao var .)
    ,               reduce using rule 34 (F -> nao var .)
    entao           reduce using rule 34 (F -> nao var .)
    }               reduce using rule 34 (F -> nao var .)
    ate             reduce using rule 34 (F -> nao var .)
    fazer           reduce using rule 34 (F -> nao var .)


state 58

    (3) code -> code ; S .

    Fim             reduce using rule 3 (code -> code ; S .)
    ;               reduce using rule 3 (code -> code ; S .)
    }               reduce using rule 3 (code -> code ; S .)


state 59

    (29) B -> E e E . ;
    (29) B -> E . e E ;
    (30) B -> E . ou E ;
    (20) N -> E . + E ;
    (21) N -> E . - E ;
    (22) N -> E . * E ;
    (23) N -> E . / E ;
    (24) N -> E . < E ;
    (25) N -> E . > E ;

    ;               shift and go to state 81
    e               shift and go to state 32
    ou              shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    <               shift and go to state 38
    >               shift and go to state 39


state 60

    (30) B -> E ou E . ;
    (29) B -> E . e E ;
    (30) B -> E . ou E ;
    (20) N -> E . + E ;
    (21) N -> E . - E ;
    (22) N -> E . * E ;
    (23) N -> E . / E ;
    (24) N -> E . < E ;
    (25) N -> E . > E ;

    ;               shift and go to state 82
    e               shift and go to state 32
    ou              shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    <               shift and go to state 38
    >               shift and go to state 39


state 61

    (20) N -> E + E . ;
    (29) B -> E . e E ;
    (30) B -> E . ou E ;
    (20) N -> E . + E ;
    (21) N -> E . - E ;
    (22) N -> E . * E ;
    (23) N -> E . / E ;
    (24) N -> E . < E ;
    (25) N -> E . > E ;

    ;               shift and go to state 83
    e               shift and go to state 32
    ou              shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    <               shift and go to state 38
    >               shift and go to state 39


state 62

    (21) N -> E - E . ;
    (29) B -> E . e E ;
    (30) B -> E . ou E ;
    (20) N -> E . + E ;
    (21) N -> E . - E ;
    (22) N -> E . * E ;
    (23) N -> E . / E ;
    (24) N -> E . < E ;
    (25) N -> E . > E ;

    ;               shift and go to state 84
    e               shift and go to state 32
    ou              shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    <               shift and go to state 38
    >               shift and go to state 39


state 63

    (22) N -> E * E . ;
    (29) B -> E . e E ;
    (30) B -> E . ou E ;
    (20) N -> E . + E ;
    (21) N -> E . - E ;
    (22) N -> E . * E ;
    (23) N -> E . / E ;
    (24) N -> E . < E ;
    (25) N -> E . > E ;

    ;               shift and go to state 85
    e               shift and go to state 32
    ou              shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    <               shift and go to state 38
    >               shift and go to state 39


state 64

    (23) N -> E / E . ;
    (29) B -> E . e E ;
    (30) B -> E . ou E ;
    (20) N -> E . + E ;
    (21) N -> E . - E ;
    (22) N -> E . * E ;
    (23) N -> E . / E ;
    (24) N -> E . < E ;
    (25) N -> E . > E ;

    ;               shift and go to state 86
    e               shift and go to state 32
    ou              shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    <               shift and go to state 38
    >               shift and go to state 39


state 65

    (24) N -> E < E . ;
    (29) B -> E . e E ;
    (30) B -> E . ou E ;
    (20) N -> E . + E ;
    (21) N -> E . - E ;
    (22) N -> E . * E ;
    (23) N -> E . / E ;
    (24) N -> E . < E ;
    (25) N -> E . > E ;

    ;               shift and go to state 87
    e               shift and go to state 32
    ou              shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    <               shift and go to state 38
    >               shift and go to state 39


state 66

    (25) N -> E > E . ;
    (29) B -> E . e E ;
    (30) B -> E . ou E ;
    (20) N -> E . + E ;
    (21) N -> E . - E ;
    (22) N -> E . * E ;
    (23) N -> E . / E ;
    (24) N -> E . < E ;
    (25) N -> E . > E ;

    ;               shift and go to state 88
    e               shift and go to state 32
    ou              shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    <               shift and go to state 38
    >               shift and go to state 39


state 67

    (9) C -> escrever ( e_list . ) ;
    (16) e_list -> e_list . , E

    )               shift and go to state 89
    ,               shift and go to state 90


state 68

    (15) e_list -> E .
    (29) B -> E . e E ;
    (30) B -> E . ou E ;
    (20) N -> E . + E ;
    (21) N -> E . - E ;
    (22) N -> E . * E ;
    (23) N -> E . / E ;
    (24) N -> E . < E ;
    (25) N -> E . > E ;

    )               reduce using rule 15 (e_list -> E .)
    ,               reduce using rule 15 (e_list -> E .)
    e               shift and go to state 32
    ou              shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    <               shift and go to state 38
    >               shift and go to state 39


state 69

    (36) E -> ( E ) .

    e               reduce using rule 36 (E -> ( E ) .)
    ou              reduce using rule 36 (E -> ( E ) .)
    +               reduce using rule 36 (E -> ( E ) .)
    -               reduce using rule 36 (E -> ( E ) .)
    *               reduce using rule 36 (E -> ( E ) .)
    /               reduce using rule 36 (E -> ( E ) .)
    <               reduce using rule 36 (E -> ( E ) .)
    >               reduce using rule 36 (E -> ( E ) .)
    Fim             reduce using rule 36 (E -> ( E ) .)
    ;               reduce using rule 36 (E -> ( E ) .)
    )               reduce using rule 36 (E -> ( E ) .)
    ,               reduce using rule 36 (E -> ( E ) .)
    entao           reduce using rule 36 (E -> ( E ) .)
    }               reduce using rule 36 (E -> ( E ) .)
    ate             reduce using rule 36 (E -> ( E ) .)
    fazer           reduce using rule 36 (E -> ( E ) .)


state 70

    (10) C -> entrada ( var . ) ;

    )               shift and go to state 91


state 71

    (13) A -> var atribui E . ;
    (29) B -> E . e E ;
    (30) B -> E . ou E ;
    (20) N -> E . + E ;
    (21) N -> E . - E ;
    (22) N -> E . * E ;
    (23) N -> E . / E ;
    (24) N -> E . < E ;
    (25) N -> E . > E ;

    ;               shift and go to state 92
    e               shift and go to state 32
    ou              shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    <               shift and go to state 38
    >               shift and go to state 39


state 72

    (14) A -> var aleatorio ( . E ) ;
    (35) E -> . var
    (36) E -> . ( E )
    (37) E -> . B
    (38) E -> . N
    (39) E -> . string
    (40) E -> . chamada_funcao arg_list
    (41) E -> . chamada_funcao
    (28) B -> . F
    (29) B -> . E e E ;
    (30) B -> . E ou E ;
    (19) N -> . nr
    (20) N -> . E + E ;
    (21) N -> . E - E ;
    (22) N -> . E * E ;
    (23) N -> . E / E ;
    (24) N -> . E < E ;
    (25) N -> . E > E ;
    (26) N -> . cos ( E ) ;
    (27) N -> . sen ( E ) ;
    (31) F -> . verdadeiro
    (32) F -> . falso
    (33) F -> . nao F
    (34) F -> . nao var

    var             shift and go to state 42
    (               shift and go to state 10
    string          shift and go to state 18
    chamada_funcao  shift and go to state 19
    nr              shift and go to state 24
    cos             shift and go to state 25
    sen             shift and go to state 26
    verdadeiro      shift and go to state 27
    falso           shift and go to state 28
    nao             shift and go to state 29

    E                              shift and go to state 93
    B                              shift and go to state 16
    N                              shift and go to state 17
    F                              shift and go to state 23

state 73

    (11) C -> para var de . E ate E fazer c_list fim_para
    (35) E -> . var
    (36) E -> . ( E )
    (37) E -> . B
    (38) E -> . N
    (39) E -> . string
    (40) E -> . chamada_funcao arg_list
    (41) E -> . chamada_funcao
    (28) B -> . F
    (29) B -> . E e E ;
    (30) B -> . E ou E ;
    (19) N -> . nr
    (20) N -> . E + E ;
    (21) N -> . E - E ;
    (22) N -> . E * E ;
    (23) N -> . E / E ;
    (24) N -> . E < E ;
    (25) N -> . E > E ;
    (26) N -> . cos ( E ) ;
    (27) N -> . sen ( E ) ;
    (31) F -> . verdadeiro
    (32) F -> . falso
    (33) F -> . nao F
    (34) F -> . nao var

    var             shift and go to state 42
    (               shift and go to state 10
    string          shift and go to state 18
    chamada_funcao  shift and go to state 19
    nr              shift and go to state 24
    cos             shift and go to state 25
    sen             shift and go to state 26
    verdadeiro      shift and go to state 27
    falso           shift and go to state 28
    nao             shift and go to state 29

    E                              shift and go to state 94
    B                              shift and go to state 16
    N                              shift and go to state 17
    F                              shift and go to state 23

state 74

    (47) arg_list -> arg_list , . E
    (35) E -> . var
    (36) E -> . ( E )
    (37) E -> . B
    (38) E -> . N
    (39) E -> . string
    (40) E -> . chamada_funcao arg_list
    (41) E -> . chamada_funcao
    (28) B -> . F
    (29) B -> . E e E ;
    (30) B -> . E ou E ;
    (19) N -> . nr
    (20) N -> . E + E ;
    (21) N -> . E - E ;
    (22) N -> . E * E ;
    (23) N -> . E / E ;
    (24) N -> . E < E ;
    (25) N -> . E > E ;
    (26) N -> . cos ( E ) ;
    (27) N -> . sen ( E ) ;
    (31) F -> . verdadeiro
    (32) F -> . falso
    (33) F -> . nao F
    (34) F -> . nao var

    var             shift and go to state 42
    (               shift and go to state 10
    string          shift and go to state 18
    chamada_funcao  shift and go to state 19
    nr              shift and go to state 24
    cos             shift and go to state 25
    sen             shift and go to state 26
    verdadeiro      shift and go to state 27
    falso           shift and go to state 28
    nao             shift and go to state 29

    E                              shift and go to state 95
    B                              shift and go to state 16
    N                              shift and go to state 17
    F                              shift and go to state 23

state 75

    (12) A -> fun var ( . args ) { code }
    (42) args -> .
    (43) args -> . var_list
    (44) var_list -> . var
    (45) var_list -> . var_list , var

    )               reduce using rule 42 (args -> .)
    var             shift and go to state 96

    args                           shift and go to state 97
    var_list                       shift and go to state 98

state 76

    (8) condicao -> se E entao . c_list senao c_list fim_se
    (17) c_list -> . C
    (18) c_list -> . c_list ; C
    (9) C -> . escrever ( e_list ) ;
    (10) C -> . entrada ( var ) ;
    (11) C -> . para var de E ate E fazer c_list fim_para
    (52) C -> . comment_single
    (53) C -> . comment_multi
    (48) comment_single -> . # comment_body
    (49) comment_multi -> . # * comment_body * #

    escrever        shift and go to state 9
    entrada         shift and go to state 11
    para            shift and go to state 13
    #               shift and go to state 22

    c_list                         shift and go to state 99
    C                              shift and go to state 100
    comment_single                 shift and go to state 14
    comment_multi                  shift and go to state 15

state 77

    (51) comment_body -> comment_body STRING .

    STRING          reduce using rule 51 (comment_body -> comment_body STRING .)
    Fim             reduce using rule 51 (comment_body -> comment_body STRING .)
    ;               reduce using rule 51 (comment_body -> comment_body STRING .)
    }               reduce using rule 51 (comment_body -> comment_body STRING .)
    senao           reduce using rule 51 (comment_body -> comment_body STRING .)
    fim_se          reduce using rule 51 (comment_body -> comment_body STRING .)
    fim_para        reduce using rule 51 (comment_body -> comment_body STRING .)
    *               reduce using rule 51 (comment_body -> comment_body STRING .)


state 78

    (49) comment_multi -> # * comment_body . * #
    (51) comment_body -> comment_body . STRING

    *               shift and go to state 101
    STRING          shift and go to state 77


state 79

    (26) N -> cos ( E . ) ;
    (29) B -> E . e E ;
    (30) B -> E . ou E ;
    (20) N -> E . + E ;
    (21) N -> E . - E ;
    (22) N -> E . * E ;
    (23) N -> E . / E ;
    (24) N -> E . < E ;
    (25) N -> E . > E ;

    )               shift and go to state 102
    e               shift and go to state 32
    ou              shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    <               shift and go to state 38
    >               shift and go to state 39


state 80

    (27) N -> sen ( E . ) ;
    (29) B -> E . e E ;
    (30) B -> E . ou E ;
    (20) N -> E . + E ;
    (21) N -> E . - E ;
    (22) N -> E . * E ;
    (23) N -> E . / E ;
    (24) N -> E . < E ;
    (25) N -> E . > E ;

    )               shift and go to state 103
    e               shift and go to state 32
    ou              shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    <               shift and go to state 38
    >               shift and go to state 39


state 81

    (29) B -> E e E ; .

    e               reduce using rule 29 (B -> E e E ; .)
    ou              reduce using rule 29 (B -> E e E ; .)
    +               reduce using rule 29 (B -> E e E ; .)
    -               reduce using rule 29 (B -> E e E ; .)
    *               reduce using rule 29 (B -> E e E ; .)
    /               reduce using rule 29 (B -> E e E ; .)
    <               reduce using rule 29 (B -> E e E ; .)
    >               reduce using rule 29 (B -> E e E ; .)
    Fim             reduce using rule 29 (B -> E e E ; .)
    ;               reduce using rule 29 (B -> E e E ; .)
    )               reduce using rule 29 (B -> E e E ; .)
    ,               reduce using rule 29 (B -> E e E ; .)
    entao           reduce using rule 29 (B -> E e E ; .)
    }               reduce using rule 29 (B -> E e E ; .)
    ate             reduce using rule 29 (B -> E e E ; .)
    fazer           reduce using rule 29 (B -> E e E ; .)


state 82

    (30) B -> E ou E ; .

    e               reduce using rule 30 (B -> E ou E ; .)
    ou              reduce using rule 30 (B -> E ou E ; .)
    +               reduce using rule 30 (B -> E ou E ; .)
    -               reduce using rule 30 (B -> E ou E ; .)
    *               reduce using rule 30 (B -> E ou E ; .)
    /               reduce using rule 30 (B -> E ou E ; .)
    <               reduce using rule 30 (B -> E ou E ; .)
    >               reduce using rule 30 (B -> E ou E ; .)
    Fim             reduce using rule 30 (B -> E ou E ; .)
    ;               reduce using rule 30 (B -> E ou E ; .)
    )               reduce using rule 30 (B -> E ou E ; .)
    ,               reduce using rule 30 (B -> E ou E ; .)
    entao           reduce using rule 30 (B -> E ou E ; .)
    }               reduce using rule 30 (B -> E ou E ; .)
    ate             reduce using rule 30 (B -> E ou E ; .)
    fazer           reduce using rule 30 (B -> E ou E ; .)


state 83

    (20) N -> E + E ; .

    e               reduce using rule 20 (N -> E + E ; .)
    ou              reduce using rule 20 (N -> E + E ; .)
    +               reduce using rule 20 (N -> E + E ; .)
    -               reduce using rule 20 (N -> E + E ; .)
    *               reduce using rule 20 (N -> E + E ; .)
    /               reduce using rule 20 (N -> E + E ; .)
    <               reduce using rule 20 (N -> E + E ; .)
    >               reduce using rule 20 (N -> E + E ; .)
    Fim             reduce using rule 20 (N -> E + E ; .)
    ;               reduce using rule 20 (N -> E + E ; .)
    )               reduce using rule 20 (N -> E + E ; .)
    ,               reduce using rule 20 (N -> E + E ; .)
    entao           reduce using rule 20 (N -> E + E ; .)
    }               reduce using rule 20 (N -> E + E ; .)
    ate             reduce using rule 20 (N -> E + E ; .)
    fazer           reduce using rule 20 (N -> E + E ; .)


state 84

    (21) N -> E - E ; .

    e               reduce using rule 21 (N -> E - E ; .)
    ou              reduce using rule 21 (N -> E - E ; .)
    +               reduce using rule 21 (N -> E - E ; .)
    -               reduce using rule 21 (N -> E - E ; .)
    *               reduce using rule 21 (N -> E - E ; .)
    /               reduce using rule 21 (N -> E - E ; .)
    <               reduce using rule 21 (N -> E - E ; .)
    >               reduce using rule 21 (N -> E - E ; .)
    Fim             reduce using rule 21 (N -> E - E ; .)
    ;               reduce using rule 21 (N -> E - E ; .)
    )               reduce using rule 21 (N -> E - E ; .)
    ,               reduce using rule 21 (N -> E - E ; .)
    entao           reduce using rule 21 (N -> E - E ; .)
    }               reduce using rule 21 (N -> E - E ; .)
    ate             reduce using rule 21 (N -> E - E ; .)
    fazer           reduce using rule 21 (N -> E - E ; .)


state 85

    (22) N -> E * E ; .

    e               reduce using rule 22 (N -> E * E ; .)
    ou              reduce using rule 22 (N -> E * E ; .)
    +               reduce using rule 22 (N -> E * E ; .)
    -               reduce using rule 22 (N -> E * E ; .)
    *               reduce using rule 22 (N -> E * E ; .)
    /               reduce using rule 22 (N -> E * E ; .)
    <               reduce using rule 22 (N -> E * E ; .)
    >               reduce using rule 22 (N -> E * E ; .)
    Fim             reduce using rule 22 (N -> E * E ; .)
    ;               reduce using rule 22 (N -> E * E ; .)
    )               reduce using rule 22 (N -> E * E ; .)
    ,               reduce using rule 22 (N -> E * E ; .)
    entao           reduce using rule 22 (N -> E * E ; .)
    }               reduce using rule 22 (N -> E * E ; .)
    ate             reduce using rule 22 (N -> E * E ; .)
    fazer           reduce using rule 22 (N -> E * E ; .)


state 86

    (23) N -> E / E ; .

    e               reduce using rule 23 (N -> E / E ; .)
    ou              reduce using rule 23 (N -> E / E ; .)
    +               reduce using rule 23 (N -> E / E ; .)
    -               reduce using rule 23 (N -> E / E ; .)
    *               reduce using rule 23 (N -> E / E ; .)
    /               reduce using rule 23 (N -> E / E ; .)
    <               reduce using rule 23 (N -> E / E ; .)
    >               reduce using rule 23 (N -> E / E ; .)
    Fim             reduce using rule 23 (N -> E / E ; .)
    ;               reduce using rule 23 (N -> E / E ; .)
    )               reduce using rule 23 (N -> E / E ; .)
    ,               reduce using rule 23 (N -> E / E ; .)
    entao           reduce using rule 23 (N -> E / E ; .)
    }               reduce using rule 23 (N -> E / E ; .)
    ate             reduce using rule 23 (N -> E / E ; .)
    fazer           reduce using rule 23 (N -> E / E ; .)


state 87

    (24) N -> E < E ; .

    e               reduce using rule 24 (N -> E < E ; .)
    ou              reduce using rule 24 (N -> E < E ; .)
    +               reduce using rule 24 (N -> E < E ; .)
    -               reduce using rule 24 (N -> E < E ; .)
    *               reduce using rule 24 (N -> E < E ; .)
    /               reduce using rule 24 (N -> E < E ; .)
    <               reduce using rule 24 (N -> E < E ; .)
    >               reduce using rule 24 (N -> E < E ; .)
    Fim             reduce using rule 24 (N -> E < E ; .)
    ;               reduce using rule 24 (N -> E < E ; .)
    )               reduce using rule 24 (N -> E < E ; .)
    ,               reduce using rule 24 (N -> E < E ; .)
    entao           reduce using rule 24 (N -> E < E ; .)
    }               reduce using rule 24 (N -> E < E ; .)
    ate             reduce using rule 24 (N -> E < E ; .)
    fazer           reduce using rule 24 (N -> E < E ; .)


state 88

    (25) N -> E > E ; .

    e               reduce using rule 25 (N -> E > E ; .)
    ou              reduce using rule 25 (N -> E > E ; .)
    +               reduce using rule 25 (N -> E > E ; .)
    -               reduce using rule 25 (N -> E > E ; .)
    *               reduce using rule 25 (N -> E > E ; .)
    /               reduce using rule 25 (N -> E > E ; .)
    <               reduce using rule 25 (N -> E > E ; .)
    >               reduce using rule 25 (N -> E > E ; .)
    Fim             reduce using rule 25 (N -> E > E ; .)
    ;               reduce using rule 25 (N -> E > E ; .)
    )               reduce using rule 25 (N -> E > E ; .)
    ,               reduce using rule 25 (N -> E > E ; .)
    entao           reduce using rule 25 (N -> E > E ; .)
    }               reduce using rule 25 (N -> E > E ; .)
    ate             reduce using rule 25 (N -> E > E ; .)
    fazer           reduce using rule 25 (N -> E > E ; .)


state 89

    (9) C -> escrever ( e_list ) . ;

    ;               shift and go to state 104


state 90

    (16) e_list -> e_list , . E
    (35) E -> . var
    (36) E -> . ( E )
    (37) E -> . B
    (38) E -> . N
    (39) E -> . string
    (40) E -> . chamada_funcao arg_list
    (41) E -> . chamada_funcao
    (28) B -> . F
    (29) B -> . E e E ;
    (30) B -> . E ou E ;
    (19) N -> . nr
    (20) N -> . E + E ;
    (21) N -> . E - E ;
    (22) N -> . E * E ;
    (23) N -> . E / E ;
    (24) N -> . E < E ;
    (25) N -> . E > E ;
    (26) N -> . cos ( E ) ;
    (27) N -> . sen ( E ) ;
    (31) F -> . verdadeiro
    (32) F -> . falso
    (33) F -> . nao F
    (34) F -> . nao var

    var             shift and go to state 42
    (               shift and go to state 10
    string          shift and go to state 18
    chamada_funcao  shift and go to state 19
    nr              shift and go to state 24
    cos             shift and go to state 25
    sen             shift and go to state 26
    verdadeiro      shift and go to state 27
    falso           shift and go to state 28
    nao             shift and go to state 29

    E                              shift and go to state 105
    B                              shift and go to state 16
    N                              shift and go to state 17
    F                              shift and go to state 23

state 91

    (10) C -> entrada ( var ) . ;

    ;               shift and go to state 106


state 92

    (13) A -> var atribui E ; .

    Fim             reduce using rule 13 (A -> var atribui E ; .)
    ;               reduce using rule 13 (A -> var atribui E ; .)
    }               reduce using rule 13 (A -> var atribui E ; .)


state 93

    (14) A -> var aleatorio ( E . ) ;
    (29) B -> E . e E ;
    (30) B -> E . ou E ;
    (20) N -> E . + E ;
    (21) N -> E . - E ;
    (22) N -> E . * E ;
    (23) N -> E . / E ;
    (24) N -> E . < E ;
    (25) N -> E . > E ;

    )               shift and go to state 107
    e               shift and go to state 32
    ou              shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    <               shift and go to state 38
    >               shift and go to state 39


state 94

    (11) C -> para var de E . ate E fazer c_list fim_para
    (29) B -> E . e E ;
    (30) B -> E . ou E ;
    (20) N -> E . + E ;
    (21) N -> E . - E ;
    (22) N -> E . * E ;
    (23) N -> E . / E ;
    (24) N -> E . < E ;
    (25) N -> E . > E ;

    ate             shift and go to state 108
    e               shift and go to state 32
    ou              shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    <               shift and go to state 38
    >               shift and go to state 39


state 95

    (47) arg_list -> arg_list , E .
    (29) B -> E . e E ;
    (30) B -> E . ou E ;
    (20) N -> E . + E ;
    (21) N -> E . - E ;
    (22) N -> E . * E ;
    (23) N -> E . / E ;
    (24) N -> E . < E ;
    (25) N -> E . > E ;

  ! shift/reduce conflict for e resolved as shift
  ! shift/reduce conflict for ou resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
    ,               reduce using rule 47 (arg_list -> arg_list , E .)
    Fim             reduce using rule 47 (arg_list -> arg_list , E .)
    ;               reduce using rule 47 (arg_list -> arg_list , E .)
    )               reduce using rule 47 (arg_list -> arg_list , E .)
    entao           reduce using rule 47 (arg_list -> arg_list , E .)
    }               reduce using rule 47 (arg_list -> arg_list , E .)
    ate             reduce using rule 47 (arg_list -> arg_list , E .)
    fazer           reduce using rule 47 (arg_list -> arg_list , E .)
    e               shift and go to state 32
    ou              shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    <               shift and go to state 38
    >               shift and go to state 39

  ! e               [ reduce using rule 47 (arg_list -> arg_list , E .) ]
  ! ou              [ reduce using rule 47 (arg_list -> arg_list , E .) ]
  ! +               [ reduce using rule 47 (arg_list -> arg_list , E .) ]
  ! -               [ reduce using rule 47 (arg_list -> arg_list , E .) ]
  ! *               [ reduce using rule 47 (arg_list -> arg_list , E .) ]
  ! /               [ reduce using rule 47 (arg_list -> arg_list , E .) ]
  ! <               [ reduce using rule 47 (arg_list -> arg_list , E .) ]
  ! >               [ reduce using rule 47 (arg_list -> arg_list , E .) ]


state 96

    (44) var_list -> var .

    ,               reduce using rule 44 (var_list -> var .)
    )               reduce using rule 44 (var_list -> var .)


state 97

    (12) A -> fun var ( args . ) { code }

    )               shift and go to state 109


state 98

    (43) args -> var_list .
    (45) var_list -> var_list . , var

    )               reduce using rule 43 (args -> var_list .)
    ,               shift and go to state 110


state 99

    (8) condicao -> se E entao c_list . senao c_list fim_se
    (18) c_list -> c_list . ; C

    senao           shift and go to state 111
    ;               shift and go to state 112


state 100

    (17) c_list -> C .

    senao           reduce using rule 17 (c_list -> C .)
    ;               reduce using rule 17 (c_list -> C .)
    fim_se          reduce using rule 17 (c_list -> C .)
    fim_para        reduce using rule 17 (c_list -> C .)


state 101

    (49) comment_multi -> # * comment_body * . #

    #               shift and go to state 113


state 102

    (26) N -> cos ( E ) . ;

    ;               shift and go to state 114


state 103

    (27) N -> sen ( E ) . ;

    ;               shift and go to state 115


state 104

    (9) C -> escrever ( e_list ) ; .

    Fim             reduce using rule 9 (C -> escrever ( e_list ) ; .)
    ;               reduce using rule 9 (C -> escrever ( e_list ) ; .)
    }               reduce using rule 9 (C -> escrever ( e_list ) ; .)
    senao           reduce using rule 9 (C -> escrever ( e_list ) ; .)
    fim_se          reduce using rule 9 (C -> escrever ( e_list ) ; .)
    fim_para        reduce using rule 9 (C -> escrever ( e_list ) ; .)


state 105

    (16) e_list -> e_list , E .
    (29) B -> E . e E ;
    (30) B -> E . ou E ;
    (20) N -> E . + E ;
    (21) N -> E . - E ;
    (22) N -> E . * E ;
    (23) N -> E . / E ;
    (24) N -> E . < E ;
    (25) N -> E . > E ;

    )               reduce using rule 16 (e_list -> e_list , E .)
    ,               reduce using rule 16 (e_list -> e_list , E .)
    e               shift and go to state 32
    ou              shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    <               shift and go to state 38
    >               shift and go to state 39


state 106

    (10) C -> entrada ( var ) ; .

    Fim             reduce using rule 10 (C -> entrada ( var ) ; .)
    ;               reduce using rule 10 (C -> entrada ( var ) ; .)
    }               reduce using rule 10 (C -> entrada ( var ) ; .)
    senao           reduce using rule 10 (C -> entrada ( var ) ; .)
    fim_se          reduce using rule 10 (C -> entrada ( var ) ; .)
    fim_para        reduce using rule 10 (C -> entrada ( var ) ; .)


state 107

    (14) A -> var aleatorio ( E ) . ;

    ;               shift and go to state 116


state 108

    (11) C -> para var de E ate . E fazer c_list fim_para
    (35) E -> . var
    (36) E -> . ( E )
    (37) E -> . B
    (38) E -> . N
    (39) E -> . string
    (40) E -> . chamada_funcao arg_list
    (41) E -> . chamada_funcao
    (28) B -> . F
    (29) B -> . E e E ;
    (30) B -> . E ou E ;
    (19) N -> . nr
    (20) N -> . E + E ;
    (21) N -> . E - E ;
    (22) N -> . E * E ;
    (23) N -> . E / E ;
    (24) N -> . E < E ;
    (25) N -> . E > E ;
    (26) N -> . cos ( E ) ;
    (27) N -> . sen ( E ) ;
    (31) F -> . verdadeiro
    (32) F -> . falso
    (33) F -> . nao F
    (34) F -> . nao var

    var             shift and go to state 42
    (               shift and go to state 10
    string          shift and go to state 18
    chamada_funcao  shift and go to state 19
    nr              shift and go to state 24
    cos             shift and go to state 25
    sen             shift and go to state 26
    verdadeiro      shift and go to state 27
    falso           shift and go to state 28
    nao             shift and go to state 29

    E                              shift and go to state 117
    B                              shift and go to state 16
    N                              shift and go to state 17
    F                              shift and go to state 23

state 109

    (12) A -> fun var ( args ) . { code }

    {               shift and go to state 118


state 110

    (45) var_list -> var_list , . var

    var             shift and go to state 119


state 111

    (8) condicao -> se E entao c_list senao . c_list fim_se
    (17) c_list -> . C
    (18) c_list -> . c_list ; C
    (9) C -> . escrever ( e_list ) ;
    (10) C -> . entrada ( var ) ;
    (11) C -> . para var de E ate E fazer c_list fim_para
    (52) C -> . comment_single
    (53) C -> . comment_multi
    (48) comment_single -> . # comment_body
    (49) comment_multi -> . # * comment_body * #

    escrever        shift and go to state 9
    entrada         shift and go to state 11
    para            shift and go to state 13
    #               shift and go to state 22

    c_list                         shift and go to state 120
    C                              shift and go to state 100
    comment_single                 shift and go to state 14
    comment_multi                  shift and go to state 15

state 112

    (18) c_list -> c_list ; . C
    (9) C -> . escrever ( e_list ) ;
    (10) C -> . entrada ( var ) ;
    (11) C -> . para var de E ate E fazer c_list fim_para
    (52) C -> . comment_single
    (53) C -> . comment_multi
    (48) comment_single -> . # comment_body
    (49) comment_multi -> . # * comment_body * #

    escrever        shift and go to state 9
    entrada         shift and go to state 11
    para            shift and go to state 13
    #               shift and go to state 22

    C                              shift and go to state 121
    comment_single                 shift and go to state 14
    comment_multi                  shift and go to state 15

state 113

    (49) comment_multi -> # * comment_body * # .

    Fim             reduce using rule 49 (comment_multi -> # * comment_body * # .)
    ;               reduce using rule 49 (comment_multi -> # * comment_body * # .)
    }               reduce using rule 49 (comment_multi -> # * comment_body * # .)
    senao           reduce using rule 49 (comment_multi -> # * comment_body * # .)
    fim_se          reduce using rule 49 (comment_multi -> # * comment_body * # .)
    fim_para        reduce using rule 49 (comment_multi -> # * comment_body * # .)


state 114

    (26) N -> cos ( E ) ; .

    e               reduce using rule 26 (N -> cos ( E ) ; .)
    ou              reduce using rule 26 (N -> cos ( E ) ; .)
    +               reduce using rule 26 (N -> cos ( E ) ; .)
    -               reduce using rule 26 (N -> cos ( E ) ; .)
    *               reduce using rule 26 (N -> cos ( E ) ; .)
    /               reduce using rule 26 (N -> cos ( E ) ; .)
    <               reduce using rule 26 (N -> cos ( E ) ; .)
    >               reduce using rule 26 (N -> cos ( E ) ; .)
    Fim             reduce using rule 26 (N -> cos ( E ) ; .)
    ;               reduce using rule 26 (N -> cos ( E ) ; .)
    )               reduce using rule 26 (N -> cos ( E ) ; .)
    ,               reduce using rule 26 (N -> cos ( E ) ; .)
    entao           reduce using rule 26 (N -> cos ( E ) ; .)
    }               reduce using rule 26 (N -> cos ( E ) ; .)
    ate             reduce using rule 26 (N -> cos ( E ) ; .)
    fazer           reduce using rule 26 (N -> cos ( E ) ; .)


state 115

    (27) N -> sen ( E ) ; .

    e               reduce using rule 27 (N -> sen ( E ) ; .)
    ou              reduce using rule 27 (N -> sen ( E ) ; .)
    +               reduce using rule 27 (N -> sen ( E ) ; .)
    -               reduce using rule 27 (N -> sen ( E ) ; .)
    *               reduce using rule 27 (N -> sen ( E ) ; .)
    /               reduce using rule 27 (N -> sen ( E ) ; .)
    <               reduce using rule 27 (N -> sen ( E ) ; .)
    >               reduce using rule 27 (N -> sen ( E ) ; .)
    Fim             reduce using rule 27 (N -> sen ( E ) ; .)
    ;               reduce using rule 27 (N -> sen ( E ) ; .)
    )               reduce using rule 27 (N -> sen ( E ) ; .)
    ,               reduce using rule 27 (N -> sen ( E ) ; .)
    entao           reduce using rule 27 (N -> sen ( E ) ; .)
    }               reduce using rule 27 (N -> sen ( E ) ; .)
    ate             reduce using rule 27 (N -> sen ( E ) ; .)
    fazer           reduce using rule 27 (N -> sen ( E ) ; .)


state 116

    (14) A -> var aleatorio ( E ) ; .

    Fim             reduce using rule 14 (A -> var aleatorio ( E ) ; .)
    ;               reduce using rule 14 (A -> var aleatorio ( E ) ; .)
    }               reduce using rule 14 (A -> var aleatorio ( E ) ; .)


state 117

    (11) C -> para var de E ate E . fazer c_list fim_para
    (29) B -> E . e E ;
    (30) B -> E . ou E ;
    (20) N -> E . + E ;
    (21) N -> E . - E ;
    (22) N -> E . * E ;
    (23) N -> E . / E ;
    (24) N -> E . < E ;
    (25) N -> E . > E ;

    fazer           shift and go to state 122
    e               shift and go to state 32
    ou              shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    <               shift and go to state 38
    >               shift and go to state 39


state 118

    (12) A -> fun var ( args ) { . code }
    (2) code -> . S
    (3) code -> . code ; S
    (4) S -> . C
    (5) S -> . E
    (6) S -> . A
    (7) S -> . condicao
    (9) C -> . escrever ( e_list ) ;
    (10) C -> . entrada ( var ) ;
    (11) C -> . para var de E ate E fazer c_list fim_para
    (52) C -> . comment_single
    (53) C -> . comment_multi
    (35) E -> . var
    (36) E -> . ( E )
    (37) E -> . B
    (38) E -> . N
    (39) E -> . string
    (40) E -> . chamada_funcao arg_list
    (41) E -> . chamada_funcao
    (12) A -> . fun var ( args ) { code }
    (13) A -> . var atribui E ;
    (14) A -> . var aleatorio ( E ) ;
    (8) condicao -> . se E entao c_list senao c_list fim_se
    (48) comment_single -> . # comment_body
    (49) comment_multi -> . # * comment_body * #
    (28) B -> . F
    (29) B -> . E e E ;
    (30) B -> . E ou E ;
    (19) N -> . nr
    (20) N -> . E + E ;
    (21) N -> . E - E ;
    (22) N -> . E * E ;
    (23) N -> . E / E ;
    (24) N -> . E < E ;
    (25) N -> . E > E ;
    (26) N -> . cos ( E ) ;
    (27) N -> . sen ( E ) ;
    (31) F -> . verdadeiro
    (32) F -> . falso
    (33) F -> . nao F
    (34) F -> . nao var

    escrever        shift and go to state 9
    entrada         shift and go to state 11
    para            shift and go to state 13
    var             shift and go to state 12
    (               shift and go to state 10
    string          shift and go to state 18
    chamada_funcao  shift and go to state 19
    fun             shift and go to state 20
    se              shift and go to state 21
    #               shift and go to state 22
    nr              shift and go to state 24
    cos             shift and go to state 25
    sen             shift and go to state 26
    verdadeiro      shift and go to state 27
    falso           shift and go to state 28
    nao             shift and go to state 29

    code                           shift and go to state 123
    S                              shift and go to state 4
    C                              shift and go to state 5
    E                              shift and go to state 6
    A                              shift and go to state 7
    condicao                       shift and go to state 8
    comment_single                 shift and go to state 14
    comment_multi                  shift and go to state 15
    B                              shift and go to state 16
    N                              shift and go to state 17
    F                              shift and go to state 23

state 119

    (45) var_list -> var_list , var .

    ,               reduce using rule 45 (var_list -> var_list , var .)
    )               reduce using rule 45 (var_list -> var_list , var .)


state 120

    (8) condicao -> se E entao c_list senao c_list . fim_se
    (18) c_list -> c_list . ; C

    fim_se          shift and go to state 124
    ;               shift and go to state 112


state 121

    (18) c_list -> c_list ; C .

    senao           reduce using rule 18 (c_list -> c_list ; C .)
    ;               reduce using rule 18 (c_list -> c_list ; C .)
    fim_se          reduce using rule 18 (c_list -> c_list ; C .)
    fim_para        reduce using rule 18 (c_list -> c_list ; C .)


state 122

    (11) C -> para var de E ate E fazer . c_list fim_para
    (17) c_list -> . C
    (18) c_list -> . c_list ; C
    (9) C -> . escrever ( e_list ) ;
    (10) C -> . entrada ( var ) ;
    (11) C -> . para var de E ate E fazer c_list fim_para
    (52) C -> . comment_single
    (53) C -> . comment_multi
    (48) comment_single -> . # comment_body
    (49) comment_multi -> . # * comment_body * #

    escrever        shift and go to state 9
    entrada         shift and go to state 11
    para            shift and go to state 13
    #               shift and go to state 22

    c_list                         shift and go to state 125
    C                              shift and go to state 100
    comment_single                 shift and go to state 14
    comment_multi                  shift and go to state 15

state 123

    (12) A -> fun var ( args ) { code . }
    (3) code -> code . ; S

    }               shift and go to state 126
    ;               shift and go to state 31


state 124

    (8) condicao -> se E entao c_list senao c_list fim_se .

    Fim             reduce using rule 8 (condicao -> se E entao c_list senao c_list fim_se .)
    ;               reduce using rule 8 (condicao -> se E entao c_list senao c_list fim_se .)
    }               reduce using rule 8 (condicao -> se E entao c_list senao c_list fim_se .)


state 125

    (11) C -> para var de E ate E fazer c_list . fim_para
    (18) c_list -> c_list . ; C

    fim_para        shift and go to state 127
    ;               shift and go to state 112


state 126

    (12) A -> fun var ( args ) { code } .

    Fim             reduce using rule 12 (A -> fun var ( args ) { code } .)
    ;               reduce using rule 12 (A -> fun var ( args ) { code } .)
    }               reduce using rule 12 (A -> fun var ( args ) { code } .)


state 127

    (11) C -> para var de E ate E fazer c_list fim_para .

    Fim             reduce using rule 11 (C -> para var de E ate E fazer c_list fim_para .)
    ;               reduce using rule 11 (C -> para var de E ate E fazer c_list fim_para .)
    }               reduce using rule 11 (C -> para var de E ate E fazer c_list fim_para .)
    senao           reduce using rule 11 (C -> para var de E ate E fazer c_list fim_para .)
    fim_se          reduce using rule 11 (C -> para var de E ate E fazer c_list fim_para .)
    fim_para        reduce using rule 11 (C -> para var de E ate E fazer c_list fim_para .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for , in state 47 resolved as shift
WARNING: shift/reduce conflict for e in state 48 resolved as shift
WARNING: shift/reduce conflict for ou in state 48 resolved as shift
WARNING: shift/reduce conflict for + in state 48 resolved as shift
WARNING: shift/reduce conflict for - in state 48 resolved as shift
WARNING: shift/reduce conflict for * in state 48 resolved as shift
WARNING: shift/reduce conflict for / in state 48 resolved as shift
WARNING: shift/reduce conflict for < in state 48 resolved as shift
WARNING: shift/reduce conflict for > in state 48 resolved as shift
WARNING: shift/reduce conflict for e in state 95 resolved as shift
WARNING: shift/reduce conflict for ou in state 95 resolved as shift
WARNING: shift/reduce conflict for + in state 95 resolved as shift
WARNING: shift/reduce conflict for - in state 95 resolved as shift
WARNING: shift/reduce conflict for * in state 95 resolved as shift
WARNING: shift/reduce conflict for / in state 95 resolved as shift
WARNING: shift/reduce conflict for < in state 95 resolved as shift
WARNING: shift/reduce conflict for > in state 95 resolved as shift
